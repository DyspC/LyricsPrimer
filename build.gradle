/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * User Manual available at https://docs.gradle.org/6.6.1/userguide/tutorial_java_projects.html
 */

buildscript {
    ext {
        javaFxVersion = '17'
    }
}

plugins {
    // Apply the java plugin to add support for Java
    id 'java'

    // Apply the application plugin to add support for building a CLI application.
    id 'application'
    id 'jacoco'
    // JavaFX interface build
    id 'org.openjfx.javafxplugin' version '0.0.10'
    id "org.beryx.jlink" version "2.24.2"
}

compileJava   {
  options.encoding = 'UTF-8'
  sourceCompatibility = '11'
  targetCompatibility = '11'
}

dependencies {
    compile group: 'commons-io', name: 'commons-io', version: '2.6'
    compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.11'
}

javafx {
    version = "$javaFxVersion"
    modules = ['javafx.controls', 'javafx.fxml']
}

jlink {
    launcher {
        name = 'LyricsPrimer'
    }
}

jacoco {
    toolVersion = "0.8.5"
    reportsDir = file("$buildDir/jacoco")
}

test {
    finalizedBy jacocoTestReport
    systemProperty "file.encoding", "UTF-8"
}
tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}
tasks.withType(Test) {
    systemProperty "file.encoding", "UTF-8"
}

jacocoTestReport {
    dependsOn test
}

repositories {
    // Use jcenter for resolving dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

def currentOS = org.gradle.internal.os.OperatingSystem.current()
def platform
if (currentOS.isWindows()) {
    platform = 'win'
} else if (currentOS.isLinux()) {
    platform = 'linux'
} else if (currentOS.isMacOsX()) {
    platform = 'mac'
}
dependencies {
    // standalone
    testCompile 'junit:junit:4.12'
    runtimeClasspath "org.openjfx:javafx-base:$javaFxVersion:$platform"
    runtimeClasspath "org.openjfx:javafx-graphics:$javaFxVersion:$platform"
    runtimeClasspath "org.openjfx:javafx-controls:$javaFxVersion:$platform"
}

application {
    // Define the main class for the application.
    mainModule = 'LyricsPrimer.main'
    mainClassName = 'fr.enssat.dysp.lyrics.ui.LyricsPrimerFx'
}

jar {
    manifest {
        // TODO make the jar start with the JavaFx frontend when ready
        attributes 'Main-Class': 'fr.enssat.dysp.lyrics.ui.LyricsPrimer'
    }
}
